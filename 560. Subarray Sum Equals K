class Solution {
    public int subarraySum(int[] nums, int k) {
        /* Brute force O(n2) time complexity
        int c=0; // count
        for(int i=0;i<nums.length;i++){
           int sum= 0;
           for(int j=i;j<nums.length;j++){
               sum+=nums[j];  
               if(sum==k) c++;
           }
        } 
        return c; */
      /* Using space - hashmap - 
      */
      int currsum=0; int count=0;
      HashMap<Integer,Integer> map = new HashMap<>();
      for(int i=0;i<nums.length;i++){
        currsum+=nums[i];
        if(currsum==k)
            count++;
        if(map.containsKey(currsum-k))
           count+=map.get(currsum-k);
        map.put(currsum,map.getOrDefault(currsum,0)+1);
      }
      return count;
    }
}
