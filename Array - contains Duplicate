class Solution {
    public boolean containsDuplicate(int[] nums) {
        /* 1. Using hashmap.Time and Space both O(n) below 
        Map<Integer,Integer> freqmap = new HashMap<>();
        for(int i:nums){
            if(freqmap.containsKey(i))
            freqmap.put(i,freqmap.get(i)+1);
            else
            freqmap.put(i,1);
        }
    
    System.out.println(freqmap);
    for(int key:freqmap.keySet()){
        if(freqmap.get(key)>1)
        return true;
    }
    return false; */
    /* Below is O(1) space and O(nlogn) time complexity */

    Arrays.sort(nums);
    // 1 1 2 3 
    for(int i=0;i<nums.length-1;i++)
    { if(nums[i]==nums[i+1])
    return true; 
    }
    return false;
}
}
