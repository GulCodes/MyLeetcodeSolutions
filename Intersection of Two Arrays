// According to me, the best approach here seems to be the hashsets approach since it has O(N) time and O(N) space. Two pointers here 
// also requires space of O(N) and has time compl. of O(NLOGN) due to sorting requirement. Theres another approach, Binary search, also O(NLOGN)
import java.util.*;
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {

        /* O(N2) time. Nested Loop.
        Set<Integer> answer = new HashSet<>();
        for(int i:nums1)
        { for(int j:nums2)
if(i==j) answer.add(i);
        }
        int[] finalarr = new int[answer.size()]; 
        int ind=0;
        for(int a:answer) finalarr[ind++]=a;
        return finalarr; */

        /* In O(N+M) (anyway, linear) time and O(N) space using hashsets 

        HashSet<Integer> set = new HashSet<>();
for(int i:nums1) set.add(i);  //nums1 added to set
HashSet<Integer> newset = new HashSet<>();
int count=0;
for(int num:nums2){         // This is O(N) operation.
    if(set.contains(num))   // This is a O(1) Operation.
   { newset.add(num); count++; } 
}

int ind=0; 
int arr[]=new int[newset.size()];
for(int i:newset) arr[ind++]=i;

return arr;   */

/* O(NLOGN) Time using sorting and 2 pointers. Also uses space due to list O(N). */
Arrays.sort(nums1);
Arrays.sort(nums2);
List<Integer> li = new ArrayList<>();
int i=0; int j=0;

while(i<nums1.length&&j<nums2.length) {
if(nums1[i]==nums2[j]){
 li.add(nums1[i]);
while((i<nums1.length-1) && nums1[i]==nums1[i+1]) i++;
while((j<nums2.length-1) && nums2[j]==nums2[j+1]) j++;
i++; j++;
}
else if(nums1[i]>nums2[j]) j++;
else i++; }

int[] finalarr = new int[li.size()]; int index=0;
for(int liElement:li) 
finalarr[index++]=liElement;

return finalarr;


    }
}
