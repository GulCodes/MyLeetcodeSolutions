class Solution {
    public List<Integer> majorityElement(int[] nums) {
/* Using space of O(N)(HASHMAP) and time of O(N)
        List<Integer> li = new ArrayList<>();
        HashMap<Integer,Integer> map = new HashMap<>();

        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i]))
                map.put(nums[i],map.get(nums[i])+1);
            else
                map.put(nums[i],1);
        }
        for(Integer k:map.keySet()){
            if(map.get(k)>nums.length/3)
            li.add(k);
        }
    return li; */
/* Using brute force O(N2) 
    Set<Integer> set = new HashSet<>();
for(int i=0;i<nums.length;i++){
    int curr= nums[i], count=1;
    for(int j=i+1;j<nums.length;j++){
if(nums[j]==curr) count++; 
} 
if(count>nums.length/3)  {
set.add(nums[i]); System.out.println(nums[i]); }
} 
return new ArrayList<Integer>(set);
*/
/* using sorting O(NLOGN)
int dec= nums.length/3, count=1;
Set<Integer> set = new HashSet<>();
Arrays.sort(nums); 
for(int i=0;i<nums.length;i++){
    if(i!=nums.length-1) { 
    if(nums[i]==nums[i+1])
    count++;
   else count=1;  }
   if(count>dec) set.add(nums[i]);
}
return new ArrayList<Integer>(set);
*/
    }}
