/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

/* Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both? Yes   */

class Solution {
    public ListNode reverseList(ListNode head) {
      
/* Recursively (This has O(N2) time and O(N) space.)

        if(head==null || head.next==null) return head; // Base case
        ListNode reversedListHead = reverseList(head.next);
        ListNode reversedListHead2 = reversedListHead;
        while(reversedListHead.next!=null)
        reversedListHead=reversedListHead.next;
        reversedListHead.next=head;
        head.next=null;
        return reversedListHead2; 
        
*/    
/* Recursively 2 - space O(N) and time will be O(N)

   if(head==null || head.next==null) return head;
        
        LinkedListNode<Integer> last = head.next;
        LinkedListNode<Integer> newhead = reverseLinkedListRec(head.next);
        last.next=head; head.next=null;
        return newhead;
        
        */
        
/* Iteratively (This is best since only O(N) time n constant space complexity. )

    if(head==null || head.next==null ) return head;
    ListNode curr = head;
    ListNode prev= null;

    while(curr!=null){
    ListNode nextNode = curr.next;
    curr.next=prev;
    prev = curr;
    curr=nextNode;
    }
    return prev;
    */
    }
}
