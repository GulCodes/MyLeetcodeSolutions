//Note: Since array given is not sorted. We can do in NlogN and constant Space (Sorting and two pointer) OR using O(N) space and O(N) time (Hashmap). 
// Is there a even better - i.e, O(N) time and constant space solution?

// Note (2): You may think that the map.containsKey() or the set.contains() are O(N) time functions. But they're O(1) time complexity because of how hasing works, it goes 
//exactly to that memory space and doesnt have to linerarly search. 

class Solution {
    public int[] twoSum(int[] nums, int target) {
        //O(N2) would be a double loop. i=0 to n-1 and j=i+1 to n-1.

        /* Below is O(nlogn) time solution using two sum from opp. sides on a sorted array. O(1) space.
      int[] origArr = nums.clone();
      Arrays.sort(nums);  

      int i=0; int j=nums.length-1;
      while(i<j){
          if(nums[i]+nums[j]==target){
                int[] finalarr = new int[2]; int k;
                 for( k=0;k<origArr.length;k++){
                   if(origArr[k] == nums[i])
                  { finalarr[0]=k; System.out.println("K: "+k); break;}  }
                 for(int p=0;p<origArr.length;p++){
                   if(p==k) continue;
                   if(origArr[p] == nums[j])
                   finalarr[1]=p; }
                   
            System.out.println("Array old:" + Arrays.toString(origArr));
            return finalarr; 
            
          }
          else if(nums[i]+nums[j]<target)
          i++;
          else j--;
      }
      return new int[2]; */


      /* HashMap - O(N) time and O(N) space */
HashMap<Integer,Integer> map = new HashMap<>();
for(int i=0;i<nums.length;i++){
if(map.containsKey(nums[i]))
return new int[]{map.get(nums[i]),i};
else 
map.put(target-nums[i],i);
}
return new int[2];

    }
}
